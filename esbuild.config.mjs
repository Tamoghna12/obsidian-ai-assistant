import esbuild from 'esbuild';
import { builtinModules } from 'module';
import process from 'process';

const banner = `
/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === 'production';

if (prod) {
  esbuild.build({
    entryPoints: ['src/main.ts'],
    bundle: true,
    external: [
      'obsidian',
      'electron',
      '@codemirror/autocomplete',
      '@codemirror/closebrackets',
      '@codemirror/collab',
      '@codemirror/commands',
      '@codemirror/comment',
      '@codemirror/fold',
      '@codemirror/gutter',
      '@codemirror/highlight',
      '@codemirror/history',
      '@codemirror/language',
      '@codemirror/lint',
      '@codemirror/matchbrackets',
      '@codemirror/panel',
      '@codemirror/rangeset',
      '@codemirror/search',
      '@codemirror/state',
      '@codemirror/stream-parser',
      '@codemirror/text',
      '@codemirror/tooltip',
      '@codemirror/view',
      ...builtinModules
    ],
    format: 'cjs',
    minify: true,
    sourcemap: false,
    treeShaking: true,
    outfile: 'main.js',
    banner: {
      js: banner
    },
    define: {
      'process.env.NODE_ENV': JSON.stringify('production')
    }
  }).catch(() => process.exit(1));
} else {
  esbuild.context({
    entryPoints: ['src/main.ts'],
    bundle: true,
    external: [
      'obsidian',
      'electron',
      '@codemirror/autocomplete',
      '@codemirror/closebrackets',
      '@codemirror/collab',
      '@codemirror/commands',
      '@codemirror/comment',
      '@codemirror/fold',
      '@codemirror/gutter',
      '@codemirror/highlight',
      '@codemirror/history',
      '@codemirror/language',
      '@codemirror/lint',
      '@codemirror/matchbrackets',
      '@codemirror/panel',
      '@codemirror/rangeset',
      '@codemirror/search',
      '@codemirror/state',
      '@codemirror/stream-parser',
      '@codemirror/text',
      '@codemirror/tooltip',
      '@codemirror/view',
      ...builtinModules
    ],
    format: 'cjs',
    minify: false,
    sourcemap: 'inline',
    treeShaking: true,
    outfile: 'main.js',
    banner: {
      js: banner
    },
    define: {
      'process.env.NODE_ENV': JSON.stringify('development')
    }
  }).then(ctx => ctx.watch()).catch(() => process.exit(1));
}